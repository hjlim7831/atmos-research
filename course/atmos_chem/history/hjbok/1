import numpy as np
from readchem import *
import matplotlib.pyplot as plt
import matplotlib.dates as dt
import dateutil
import sys
from calc_coeff import calc_coeff
from cossza import cossza
from calc_pl import calc_pro
from calc_pl import calc_lo
from calc_pl import calc_implo
from iteration import iteration
from math import *
from reademis import emiss
from reademisisp import emiss as ispemis
import datetime
from readdep import depos
from diffusion import diffusion
from unit_conv import unit_conv
import pickle

#################################### MAIN PROGRAM ###################################
# THIS PROGRAM IS THE MAIN LEVEL DRIVER PROGRAM FOR THE SIMPLE COLUMN MODEL.

start           = '2016,06,15'
lat             = 37.5
lon             = 127.
chem_status     = 'T'
emis_status     = 'F'
depos_status    = 'F'
diff_status	= 'F'
save		= 'F'
do_plot		= 'T'

h               = 180                    # timestep size [sec]
end_t           = 180*1     	 	# end time of simulation
solver          = 'BWE'
nsteps          = int(float(end_t)/h)                                



# VERTICAL GRID SETUP ################################################################

R 		= 8.31                  # J/Kmol        
lapse_rate 	= 6.49E-03              # K/m
Av 		= 6.02E+23              # molec/mole
nlev 		= 10
Ps		= 1000. 		# hPa
Pt		= 700.

P = np.zeros(nlev+1, dtype='d')		# pressure at each boundary of the layer (hPa)
lev = np.zeros(nlev+1, dtype='d')	# altitude of each boundary (m)

result = np.zeros((nlev,nspc),dtype='d') 

for i in range(nlev):
 result[i,:] = conc			# assign initial values for all layers                         


for i in range(nlev+1):
 P[i] = Ps - (Ps-Pt)/nlev*i		# no topography -> constant dP between layers
 lev[i] = 7500*log(Ps/P[i])		# assume scale height = 7.5 km


dz = np.zeros(nlev,dtype='d')
for i in range(nlev):
 dz[i] = lev[i+1]-lev[i]


# INITIALIZE TIME ###################################################################

time = 0. 						# start time

timeseries = np.zeros((nsteps,nlev,nspc),dtype='d') 	# timeseries for each species

times = np.linspace(0., end_t/3600., len(timeseries))	# time array

Tsurf = np.zeros(nsteps,dtype='d')

init_J = np.copy(A[int(photstart)-1:])


print "** B E G I N  T I M E  S T E P P I N G ! ! !"

# TIMESTEP LOOP #####################################################################

for t in range(1,nsteps+1):

 print '*******************************************'

#-----------------------------------------------------------------------------------
# Diurnal variation of surface temperature ( local time = UTC + 9hrs )
 Ts = 273. + 10*sin((2*pi/86400.)*(time-1*3600.)) + 25.

# Air temperature at each level
 T = np.zeros(nlev, dtype='d')
 T[0] = Ts
 for i in range(nlev-1):
  T[i+1] = Ts - lapse_rate*dz[i]

# Air density at each level
 Nd = np.zeros(nlev, dtype='d')
 for i in range(nlev):
  Nd[i] = 1E-04*P[i]*Av*(R*T[i])**(-1)               # molec/cm3

# mixing ratio -> number density
 converted = unit_conv(result,nlev,Nd,'mr2nd')
 result = np.copy(converted)           


#-----------------------------------------------------------------------------------
# EMISSION #
 if emis_status == 'T':

#       emis = ispemis(species,MW,dz,Ts) 
        emis = emiss(species,MW,dz)
        result[0] = result[0] + emis*h

#-----------------------------------------------------------------------------------

# DRY DEPOSITION #
 if depos_status == 'T':

        result[0] = result[0] - depos*result[0]*h/(dz[0]*1E+02)

#-----------------------------------------------------------------------------------

# VERTICAL CALCULATION LOOP ########################################################

# CHEMISTRY #

 if chem_status == 'T':
 
  for z in range(nlev):

# Before calculation adjust rate coeffecients
   rate_co = np.zeros(nrxn, dtype='d')

   for i in range(nkin):
         p1 = species.index('M')
         p2 = species.index('H2O')
         M_conc = result[z,p1] 
         H2O_conc = result[z,p2]
         rate_co[i] = calc_coeff(A[i],B[i],C[i],Q[i],Fc[i],T[z],M_conc,H2O_conc)
   for i in range(npht):
         rate_co[nkin+i] = init_J[i]
         cos_sza = cossza(start,time,lon,lat)
         if cos_sza > 0.:
             rate_co[nkin+i] = init_J[i] * cos_sza 
         else: 
             rate_co[nkin+i] = 0.


# FORWARD EULER METHOD

   if solver == 'FWE':
 
         init_conc = result[z]
         pro = calc_pro(init_conc,pnum,p_ind,rate_co)
         lo = calc_lo(init_conc,rnum,r_ind,rate_co)
  
         for i in range(nact):
             result[z,i] = ( result[z,i] + h*( pro[i] - lo[i] ) )
        

# BACKWARD EULER METHOD

   if solver == 'BWE':

         init_conc = result[z]
         pro = calc_pro(init_conc,pnum,p_ind,rate_co)
         imp_lo = calc_implo(init_conc,rate_co)
    
         for i in range(nact):
             result[z,i] = ( result[z,i] + h*pro[i] )/( 1. + h*imp_lo[i] )


# MIE 

   if solver == 'MIE':

         init_conc = result[z]
      
         h_mie = h		
         n_mie = 1
         while range(n_mie):
          itr_res = iteration(h_mie,init_conc,rate_co)
          result[z] = itr_res['estimate']
          if itr_res['status'] == 0:
           break
          if itr_res['status'] == 1:
           print "Convergence failed! Reducing time step..."
           h_mie = h_mie * 0.5
           n_mie = n_mie * 2

#---------------------------------------------------------------------------------

# DIFFUSION #

 if diff_status == 'T':

 # number density -> mixing ratio
  converted = unit_conv(result,nlev,Nd,'nd2mr')
  result = np.copy(converted)

 # Start diffusion
  diff = diffusion(nlev,nspc,h,dz,lev)
  Az = diff[0]
  Bz = diff[1]
  Dz = diff[2]

  gamma = np.zeros((nlev,nact),dtype='d')
  alpha = np.zeros((nlev,nact),dtype='d')

  for i in range(nact):
   gamma[0,i] = -Dz[0,i]/Bz[0,i]
   alpha[0,i] = (1-Az[0,i])*result[0,i]/Bz[0,i]
   for z in range(1,nlev):
         gamma[z,i] = -Dz[z,i]/(Bz[z,i] + Az[z,i]*gamma[z-1,i])
         alpha[z,i] = (result[z,i] - Az[z,i]*alpha[z-1,i])/(Bz[z,i] + Az[z,i]*gamma[z-1,i])

   result[nlev-1,i] = alpha[nlev-1,i]
   for z in range(nlev-2,-1,-1): 
    result[z,i] = alpha[z,i] + gamma[z,i]*result[z+1,i]

#---------------------------------------------------------------------------------

 if diff_status == 'F':
  # number density -> mixing ratio
  converted = unit_conv(result,nlev,Nd,'nd2mr')
  result = np.copy(converted)

 # save variables
 timeseries[t-1] = np.copy(result)
 Tsurf[t-1] = np.copy(Ts)

 # increment time
 print time/3600.
 time = time + h
 


print '	END OF SIMULATION'
print '********************************************'

# END OF TIME LOOP ###############################################################

# SAVE DATA
if save == 'T':
 fname = input("Enter output filename: ")
 file = open('../output/'+fname+'.txt', 'w')
 pickle.dump(timeseries, file)
 file.close()


# PLOT
if do_plot == 'T': 
 plot = [0,1,5,8,10,12,15,16]	# NO, NO2, HNO3, O3, OH, HO2, CH4, CH3O2
 for i in plot:
  fig, ax1 = plt.subplots(figsize=(4,5))
  ax1.set_title(species[i])
  plt.xlabel('simulation time [hr]',fontsize=10)
  plt.ylabel('v/v',fontsize=10)
  plt.plot(times,timeseries[:,0,i],'black',linewidth='2',label='1000 hPa') 
  plt.plot(times,timeseries[:,9,i],'b--',linewidth='2',label='700 hPa')
  plt.xlim(times[0],times[len(times)-1])
  h1, l1 = ax1.get_legend_handles_labels()
  ax1.legend(h1,l1,loc='best')
  fig_name = species[i]+'.png'
 #fig.savefig(fig_name)
  plt.show()










##############################################################################
################################# END OF MAIN ################################
##############################################################################
